from django.db import models
from django.core.validators import MinValueValidator
from django.db.models import F, Sum
from django.utils import timezone

from phonenumber_field.modelfields import PhoneNumberField

from coordinates.models import PlaceCoordinates
from coordinates.fetch_coords import fetch_coordinates, save_coordinates


class Restaurant(models.Model):
    name = models.CharField(
        '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=50
    )
    address = models.CharField(
        '–∞–¥—Ä–µ—Å',
        max_length=100,
        blank=True,
    )
    contact_phone = models.CharField(
        '–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
        max_length=50,
        blank=True,
    )

    class Meta:
        verbose_name = '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'
        verbose_name_plural = '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'

    def __str__(self):
        return self.name

    def save_coords(self):
        save_coordinates(self.address)


class ProductQuerySet(models.QuerySet):
    def available(self):
        products = (
            RestaurantMenuItem.objects
            .filter(availability=True)
            .values_list('product')
        )
        return self.filter(pk__in=products)


class ProductCategory(models.Model):
    name = models.CharField(
        '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=50
    )

    class Meta:
        verbose_name = '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

    def __str__(self):
        return self.name


class Product(models.Model):
    name = models.CharField(
        '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=50
    )
    category = models.ForeignKey(
        ProductCategory,
        verbose_name='–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        related_name='products',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
    )
    price = models.DecimalField(
        '—Ü–µ–Ω–∞',
        max_digits=8,
        decimal_places=2,
        validators=[MinValueValidator(0)]
    )
    image = models.ImageField(
        '–∫–∞—Ä—Ç–∏–Ω–∫–∞'
    )
    special_status = models.BooleanField(
        '—Å–ø–µ—Ü.–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        default=False,
        db_index=True,
    )
    description = models.TextField(
        '–æ–ø–∏—Å–∞–Ω–∏–µ',
        max_length=200,
        blank=True,
    )

    objects = ProductQuerySet.as_manager()

    class Meta:
        verbose_name = '—Ç–æ–≤–∞—Ä'
        verbose_name_plural = '—Ç–æ–≤–∞—Ä—ã'

    def __str__(self):
        return self.name


class RestaurantMenuItemQuerySet(models.QuerySet):

    def get_available_restaurants(self):
        return self.filter(availability=True).prefetch_related('product',
                                                               'restaurant')


class RestaurantMenuItem(models.Model):
    restaurant = models.ForeignKey(
        Restaurant,
        related_name='menu_items',
        verbose_name="—Ä–µ—Å—Ç–æ—Ä–∞–Ω",
        on_delete=models.CASCADE,
    )
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        related_name='menu_items',
        verbose_name='–ø—Ä–æ–¥—É–∫—Ç',
    )
    availability = models.BooleanField(
        '–≤ –ø—Ä–æ–¥–∞–∂–µ',
        default=True,
        db_index=True
    )

    objects = RestaurantMenuItemQuerySet.as_manager()

    class Meta:
        verbose_name = '–ø—É–Ω–∫—Ç –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'
        verbose_name_plural = '–ø—É–Ω–∫—Ç—ã –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'
        unique_together = [
            ['restaurant', 'product']
        ]

    def __str__(self):
        return f'{self.restaurant.name} - {self.product.name}'


class OrderQuerySet(models.QuerySet):

    def get_total_price(self):
        total_price = self.annotate(
            total_price=Sum(F('quantity__quantity') * F('quantity__order_price'))
        )
        return total_price

    def get_restaurants(self):
        return self.prefetch_related('products__menu_items__restaurant')

    def get_unprocessed(self):
        return self.filter(status='unprocessed')


class Order(models.Model):
    PROCESSED = 'processed'
    UNPROCESSED = 'unprocessed'
    STATUS_CHOICES = [
        (UNPROCESSED, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'),
        (PROCESSED, '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'),
    ]

    CASH = 'cash'
    BANK_CARD = 'card'
    IMMEDIATE = 'immediate'

    PAYMENT_CHOICES = [
        (IMMEDIATE, '‚úÖ –°—Ä–∞–∑—É'),
        (BANK_CARD, 'üí≥ –ö–∞—Ä—Ç–æ–π'),
        (CASH, 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏')
    ]

    status = models.CharField(
        verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        max_length=20,
        choices=STATUS_CHOICES,
        default=UNPROCESSED,
        db_index=True
    )
    payment_method = models.CharField(
        verbose_name='–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        max_length=30,
        choices=PAYMENT_CHOICES,
        db_index=True
    )
    firstname = models.CharField('–∏–º—è', max_length=50)
    lastname = models.CharField('—Ñ–∞–º–∏–ª–∏—è', max_length=50)
    phonenumber = PhoneNumberField('–Ω–æ–º–µ—Ä —Ç–µ–ª.', db_index=True)
    address = models.CharField('–∞–¥—Ä–µ—Å', max_length=200)
    products = models.ManyToManyField(
        Product,
        through='ProductsQty',
        verbose_name='—Ç–æ–≤–∞—Ä—ã',
        related_name='orders',
        )
    comment = models.TextField('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', blank=True)
    registered_at = models.DateTimeField(
        '–°–æ–∑–¥–∞–Ω',
        default=timezone.now,
        db_index=True
    )
    called_at = models.DateTimeField(
        '–û–±—Ä–∞–±–æ—Ç–∞–Ω',
        null=True,
        blank=True,
        db_index=True,
    )
    delivered_at = models.DateTimeField(
        '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        null=True,
        blank=True,
        db_index=True
    )

    objects = OrderQuerySet.as_manager()

    class Meta:
        verbose_name = '–∑–∞–∫–∞–∑'
        verbose_name_plural = '–∑–∞–∫–∞–∑—ã'

    def __str__(self):
        return f'{self.lastname} {self.firstname}'

    def save_coords(self):
        save_coordinates(self.address)


class ProductsQty(models.Model):
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        verbose_name='—Ç–æ–≤–∞—Ä',
        related_name='quantity',
    )
    order = models.ForeignKey(
        Order,
        on_delete=models.CASCADE,
        verbose_name='–∑–∞–∫–∞–∑',
        related_name='quantity',
    )
    quantity = models.SmallIntegerField(
        verbose_name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        validators=[MinValueValidator(1)],
        db_index=True
    )
    order_price = models.DecimalField(
        verbose_name='—Ü–µ–Ω–∞',
        max_digits=8,
        decimal_places=2,
        validators=[MinValueValidator(0)],
        db_index=True
    )

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ'

    def __str__(self):
        return f'{self.order.id} | {self.order}'
